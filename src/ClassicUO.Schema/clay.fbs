attribute "fs_valueStruct";
attribute "fs_serializer";
attribute "fs_unsafeExternal";

namespace ClassicUO.Schema;

enum ClayWidgetType : byte {
    None = 0,
    Button = 1,
    TextInput = 2,
    TextFragment = 3
}

enum ClayTextElementConfigWrapMode : byte {
    CLAY_TEXT_WRAP_WORDS = 0,
    CLAY_TEXT_WRAP_NEWLINES = 1,
    CLAY_TEXT_WRAP_NONE = 2
}

enum ClayTextAlignment : byte {
    CLAY_TEXT_ALIGN_LEFT = 0,
    CLAY_TEXT_ALIGN_CENTER = 1,
    CLAY_TEXT_ALIGN_RIGHT = 2
}

enum ClayLayoutDirection : byte {
    CLAY_LEFT_TO_RIGHT = 0,
    CLAY_TOP_TO_BOTTOM = 1
}

enum ClayLayoutAlignmentX : byte {
    CLAY_ALIGN_X_LEFT = 0,
    CLAY_ALIGN_X_RIGHT = 1,
    CLAY_ALIGN_X_CENTER = 2
}

enum ClayLayoutAlignmentY : byte {
    CLAY_ALIGN_Y_TOP = 0,
    CLAY_ALIGN_Y_BOTTOM = 1,
    CLAY_ALIGN_Y_CENTER = 2
}

enum ClaySizingType : byte {
    CLAY_SIZING_TYPE_FIT = 0,
    CLAY_SIZING_TYPE_GROW = 1,
    CLAY_SIZING_TYPE_PERCENT = 2,
    CLAY_SIZING_TYPE_FIXED = 3
}

struct ClayColor (fs_valueStruct) {
    r: float;
    g: float;
    b: float;
    a: float;
}

struct ClayDimensions (fs_valueStruct) {
    width: float;
    height: float;
}

struct ClayVector2 (fs_valueStruct) {
    x: float;
    y: float;
}

struct ClayChildAlignment (fs_valueStruct) {
    x: ClayLayoutAlignmentX;
    y: ClayLayoutAlignmentY;
}

struct ClaySizingMinMax (fs_valueStruct) {
    min: float;
    max: float;
}

// Remove fs_valueStruct from all structs that contain other structs
struct ClaySizingAxis {
    min_max: ClaySizingMinMax;
    percent: float;
    type: ClaySizingType;
}

struct ClaySizing {
    width: ClaySizingAxis;
    height: ClaySizingAxis;
}

struct ClayPadding (fs_valueStruct) {
    left: uint16;
    right: uint16;
    top: uint16;
    bottom: uint16;
}

table ClayLayoutConfig {
    sizing: ClaySizing;
    padding: ClayPadding;
    child_gap: uint16;
    child_alignment: ClayChildAlignment;
    layout_direction: ClayLayoutDirection;
}

struct ClayCornerRadius (fs_valueStruct) {
    top_left: float;
    top_right: float;
    bottom_left: float;
    bottom_right: float;
}

struct ClayFloatingElementConfig {
    offset: ClayVector2;
    expand: ClayDimensions;
    parent_id: uint32;
    z_index: int16;
}

struct ClayClipElementConfig {
    horizontal: bool;
    vertical: bool;
    child_offset: ClayVector2;
}

struct ClayBorderWidth (fs_valueStruct) {
    left: uint16;
    right: uint16;
    top: uint16;
    bottom: uint16;
    between_children: uint16;
}

struct ClayBorderElementConfig {
    color: ClayColor;
    width: ClayBorderWidth;
}

struct ClayAspectRatioElementConfig (fs_valueStruct) {
    aspect_ratio: float;
}

table ClayString {
    length: int32;
    chars: string;
    is_statically_allocated: bool;
}

table ClayElementId {
    id: uint32;
    offset: uint32;
    base_id: uint32;
    string_id: ClayString;
}

table ClayImageElementConfig {
    image_data: [uint8]; // void* represented as byte array
}

table ClayCustomElementConfig {
    custom_data: [uint8]; // void* represented as byte array
}

table ClayTextConfig {
    text_color: ClayColor;
    font_id: uint16;
    font_size: uint16;
    letter_spacing: uint16;
    line_height: uint16;
    wrap_mode: ClayTextElementConfigWrapMode;
    text_alignment: ClayTextAlignment;
}

table UIText {
    value: string;
    replaced_char: uint16;
    text_config: ClayTextConfig;
}

table UOButtonWidget {
    normal: uint16;
    pressed: uint16;
    over: uint16;
}

table ClayUOCommandData {
    command_type: uint32;
    data: [uint8];
}

table ClayElementDecl {
    id: ClayElementId;
    layout: ClayLayoutConfig;
    background_color: ClayColor;
    corner_radius: ClayCornerRadius;
    aspect_ratio: ClayAspectRatioElementConfig;
    image: ClayImageElementConfig;
    floating: ClayFloatingElementConfig;
    custom: ClayCustomElementConfig;
    clip: ClayClipElementConfig;
    border: ClayBorderElementConfig;
    user_data: [uint8]; // void* represented as byte array
}

table UINodeProxy {
    id: uint64;
    config: ClayElementDecl;
    uo_config: ClayUOCommandData;
    text_config: UIText;
    uo_button: UOButtonWidget;
    widget_type: ClayWidgetType = None;
    movable: bool = false;
}

struct UINodeRelation (fs_valueStruct) {
    child: uint64;
    parent: uint64;
}

table UINodes (fs_serializer) {
    nodes: [UINodeProxy];
    relations: [UINodeRelation];
}
