<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net47</TargetFramework>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
    <PlatformTarget>x64</PlatformTarget>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <OutputPath>$(SolutionDir)bin\Release\</OutputPath>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <PlatformTarget>x64</PlatformTarget>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <OutputPath>$(SolutionDir)bin\Debug\</OutputPath>
  </PropertyGroup>
  
  <PropertyGroup>
    <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>
    <AppendRuntimeIdentifierToOutputPath>false</AppendRuntimeIdentifierToOutputPath>
  </PropertyGroup>

  <PropertyGroup>
    <GenerateAssemblyInfo>true</GenerateAssemblyInfo>
  </PropertyGroup>

  <PropertyGroup>
    <Company>ClassicUO</Company>
    <Authors>Andrea Angelini</Authors>
    <Version>1.0.0</Version>
    <AssemblyVersion>0.1.3.700</AssemblyVersion>
    <FileVersion>0.1.3.700</FileVersion>
    <Version>1.0.0</Version>
    <Copyright>ClassicUO</Copyright>
    <PackageProjectUrl>https://www.classicuo.eu/</PackageProjectUrl>
    <Description>An open source implementation of the Ultima Online Classic Client.</Description>
  </PropertyGroup>

  <ItemGroup>
    <None Remove="cuologo.png" />
    <None Remove="Renderer\fonts\bold_font.xnb" />
    <None Remove="Renderer\fonts\map1_font.xnb" />
    <None Remove="Renderer\fonts\map2_font.xnb" />
    <None Remove="Renderer\fonts\map3_font.xnb" />
    <None Remove="Renderer\fonts\map4_font.xnb" />
    <None Remove="Renderer\fonts\map5_font.xnb" />
    <None Remove="Renderer\fonts\map6_font.xnb" />
    <None Remove="Renderer\fonts\regular_font.xnb" />
    <None Remove="shaders\IsometricWorld.fxc" />
    <None Remove="shaders\xBR.fxc" />
  </ItemGroup>

  <ItemGroup>
    <EmbeddedResource Include="cuologo.png" />
    <EmbeddedResource Include="Renderer\fonts\bold_font.xnb" />
    <EmbeddedResource Include="Renderer\fonts\map1_font.xnb" />
    <EmbeddedResource Include="Renderer\fonts\map2_font.xnb" />
    <EmbeddedResource Include="Renderer\fonts\map3_font.xnb" />
    <EmbeddedResource Include="Renderer\fonts\map4_font.xnb" />
    <EmbeddedResource Include="Renderer\fonts\map5_font.xnb" />
    <EmbeddedResource Include="Renderer\fonts\map6_font.xnb" />
    <EmbeddedResource Include="Renderer\fonts\regular_font.xnb" />
    <EmbeddedResource Include="shaders\IsometricWorld.fxc" />
    <EmbeddedResource Include="shaders\xBR.fxc" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Newtonsoft.Json" Version="12.0.3" />
  </ItemGroup>

  <ItemGroup>
    <Reference Include="cuoapi">
      <HintPath>..\external\api\cuoapi.dll</HintPath>
    </Reference>
    <Reference Include="FNA">
      <HintPath>..\external\FNA\FNA.dll</HintPath>
    </Reference>
    <Reference Include="System.IO.Compression" />
  </ItemGroup>

  <PropertyGroup>
    <PostBuildEvent Condition="'$(OS)' != 'UNIX'">
      if not exist "$(TargetDir)lib64\" mkdir  "$(OutputPath)lib64\"
      if not exist "$(TargetDir)osx\" mkdir  "$(OutputPath)osx\"
      if not exist "$(TargetDir)x64\" mkdir  "$(OutputPath)x64\"

      xcopy $(SolutionDir)external\lib64\*.*   $(OutputPath)lib64\   /Y
      xcopy $(SolutionDir)external\osx\*.*      $(OutputPath)osx\    /Y
      xcopy $(SolutionDir)external\x64\*.*      $(OutputPath)x64\    /Y
    </PostBuildEvent>
    <ApplicationIcon>cuoicon.ico</ApplicationIcon>
  </PropertyGroup>

  <PropertyGroup>
    <PostBuildEvent Condition="'$(OS)' == 'UNIX'">

      if ! [ -d "$(OutputPath)lib64/" ]; then
      mkdir -p "$(OutputPath)lib64/"
      fi

      if ! [ -d "$(OutputPath)osx/" ]; then
      mkdir -p "$(OutputPath)osx/"
      fi
 
      if ! [ -d "$(OutputPath)x64/" ]; then
      mkdir -p "$(OutputPath)x64/"
      fi

      cp -Rf $(SolutionDir)external/lib64/*.*   $(OutputPath)lib64/
      cp -Rf $(SolutionDir)external/osx/*.*     $(OutputPath)osx/ 
      cp -Rf $(SolutionDir)external/x64/*.*     $(OutputPath)x64/
    </PostBuildEvent>
   
  </PropertyGroup>

</Project>
